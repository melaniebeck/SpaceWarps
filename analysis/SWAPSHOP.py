
import os
import subprocess
import pdb
import swap
from optparse import OptionParser

'''
Need to run SWAP.py multiple times -- once for every "day" in GZ2
Take that output and feed it into my machine classifiers
Take that output and determine retirement

'''

parser = OptionParser()
parser.add_option("-n", "--new", action="store_true", dest="startup", 
                  default=False, help="start new SWAPSHOP with startup.config")
parser.add_option("-c","--config", dest="config_name", 
                  help='Addendum to the config filename')
parser.add_option("-d", "--dir", dest="directory_name", default=None,
                  help="Store all output in DIR", metavar="DIR")

(options, args) = parser.parse_args()

# If we're starting a new run, set config to startup.config
if options.startup and options.config_name: 
    config = options.config_name
    count = 0
    try:
        machine = swap.Configuration(config).parameters['machine']
    except:
        machine = False
        print "SWAPSHOP found no 'machine' parameter in the configfile"
        print "MachineClassifier.py will not be called"

elif options.startup:
    config = "startup.config"
    count = 0
else: 
    config = "update.config"
    count = int(subprocess.check_output("ls %s/ | wc -l"%log_dir, shell=True))


# Choose a location for the logfiles which are generated by SWAP each "day"
if options.directory_name: 
    log_dir = "logfiles_%s"%(options.directory_name)
else: 
    log_dir = "logfiles"

more_to_do = True

# Ensure that this directory exists
if not os.path.exists(log_dir): os.makedirs(log_dir)


while more_to_do:

    # Define "today's" logfile name -- the count specifies which day
    logfile = "%s/GZ2_%i.log"%(log_dir,count)

    # run SWAP.py with the chosen configfile (and specific logfile?)
    #os.system("python SWAP.py %s > %s"%(config,logfile))
    os.system("python SWAP.py %s"%(config))

    if machine:
        # ALWAYS run MachineClassifier.py with update.config!
        os.system("python MachineClassifier.py -c update.config")

    # Increment the day
    count+=1

    # Check if SWAP.py set the "keep going" cookie to False
    #more = os.system("grep 'running' .swap.cookie | wc -l")
    more = subprocess.check_output("grep 'running' .swap.cookie | wc -l", 
                                         shell=True)

    # Read the results of that call -- they're goofy
    if more=='0\n': more_to_do = False

    # Update shit, and print success
    if more_to_do: 
        config = "update.config"
        print "Ran SWAP.py %i times"%count
        print "Still more to do!\n"

    else: print "That's the last one!"
