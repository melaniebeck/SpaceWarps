# ======================================================================

import numpy as np
import os,sys,datetime,pdb

try: import MySQLdb as mdb
except:
    print "MySQLdb: MySQLdb is not installed. You can still practise though --really?"
    # sys.exit()

# ======================================================================

class MySQLdb(object):
    """
    NAME
        MySQLDB

    PURPOSE
        Interrogate an actual mysql database, and serve up data for a 
        a simple python analysis.

    COMMENTS
       I dunno right now.


    """

# ----------------------------------------------------------------------------

    def __init__(self):
        
        try: con = mdb.connect('localhost', 'root', '8croupier!', 'gz2')
        except:
            print "MySQLdb: couldn't connect to a MySQL DB with that name"
            sys.exit()

        with con:
            self.cur = con.cursor(mdb.cursors.DictCursor)

        return None


    def find(self,word,t):
        stuff = ('annotations.answer_id', 'annotations.created_at', 
                 'classifications.user_id', 
                 'asset_classifications.asset_id', str(t))

        if word == 'since':
            query = ("select %s, %s, %s, %s from classifications "
                     "join annotations "
                     "on annotations.classification_id = classifications.id "
                     "join asset_classifications "
                     "on asset_classifications.classification_id = "
                     "classifications.id "
                     "where annotations.task_id = 1 "
                     "and annotations.created_at > '%s'"%stuff)
            self.cur.execute(query)

        elif word == 'before':
            query = ("select %s, %s, %s, %s from classifications "
                     "join annotations "
                     "on annotations.classification_id = classifications.id "
                     "join asset_classifications "
                     "on asset_classifications.classification_id = "
                     "classifications.id "
                     "where annotations.task_id = 1 "
                     "and annotations.created_at < '%s'"%stuff)
            self.cur.execute(query)

        else:
            print "MySQLdb: error, cannot find classifications %s %s"\
                %(word, str(t))


        batch = self.cur.fetchall()
        return batch


# ----------------------------------------------------------------------------
# Return a tuple of the key quantities, given a cursor pointing to a 
# record in the classifications table:

    def digest(self,classification,survey,method=False):
        
        # When was this classification made?
        t = classification['created_at'].strftime('%Y-%m-%d_%H:%M:%S')

        # Who made the classification?
        Name = classification['user_id']

        # Which subject was classified? 
        ID = ZooID = classification['asset_id']

        # What did user say about this subject? 
        # --- if answer_id == 1, smooth
        # ---    answer_id == 2, features/disk
        # ---    answer_id == 3, star/artifact
        if classification['answer_id'] == 1: result = 'SMOOTH'
        else: result = 'NOT'

        category = 'test'
        flavor = 'test'
        kind = 'test'
        truth = 'UNKNOWN'

        items = t, str(Name), str(ID), str(ZooID), category, kind, flavor,\
                result, truth

        return items[:]


# ----------------------------------------------------------------------------
# Return the size of the classification table:

    def size(self):
        return self.cur.rowcount

# ----------------------------------------------------------------------------

    def cleanup(self):
    
        try: self.cur.close()
        except: pass
        try: self.con.close()
        except: pass
        del self.cur

        return

# ======================================================================

if __name__ == '__main__':
   
    db = MySQLdb()
    
    #t1 = datetime.datetime(1978, 2, 28, 12,0, 0, 0)
    t1 = datetime.datetime(2009, 2, 16, 23, 59, 59)

    batch = db.find('before',t1)


    pdb.set_trace()
    print db.size

    db.cleanup()
